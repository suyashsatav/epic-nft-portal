{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","askContractToMintNft","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6yqEAAe,G,MAAA,IAA0B,0C,uBCMnCA,EAAiB,cACjBC,EAAY,8BAA0BD,GA8H7BE,EA1HH,WACV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAwB,uCAAG,kCAAAC,EAAA,2DACVC,OAAbC,EADuB,EACvBA,SADuB,uBAI7BC,QAAQC,IAAI,gCAJiB,0BAO7BD,QAAQC,IAAI,8BAA+BF,GAPd,uBAURA,EAASG,QAAQ,CAAEC,OAAQ,iBAVnB,OAYP,KAFlBC,EAVyB,QAYlBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5CX,EAAkBW,IAElBN,QAAQC,IAAI,+BAjBiB,4CAAH,qDAwBxBM,EAAa,uCAAG,gCAAAV,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBS,MAAM,iBALU,0CAYKT,EAASG,QAAQ,CAAEC,OAAQ,wBAZhC,OAYZC,EAZY,OAiBlBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCT,EAAkBS,EAAS,IAlBT,kDAoBlBJ,QAAQC,IAAR,MApBkB,0DAAH,qDAwBbQ,EAAoB,uCAAG,sCAAAZ,EAAA,yDACF,6CADE,WAIJC,SAAbC,EAJiB,EAIjBA,UAJiB,wBAOjBW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBC,EAAoB,IAAIL,IAAOM,SARhB,6CAQ2CC,EAAUC,IAAKL,GAE/Ed,QAAQC,IAAI,yCAXW,UAYJe,EAAkBI,gBAZd,eAYnBC,EAZmB,OAcvBrB,QAAQC,IAAI,yBAdW,UAejBoB,EAAOC,OAfU,QAiBvBtB,QAAQC,IAAR,kEAAuEoB,EAAOE,OAjBvD,wBAoBvBvB,QAAQC,IAAI,kCApBW,0DAuBzBD,QAAQC,IAAR,MAvByB,0DAAH,qDAyC1B,OAPAuB,qBAAU,WACR5B,MACC,IAMD,qBAAK6B,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,+BACA,mBAAGA,UAAU,WAAb,mEAGoB,KAAnB/B,EApBP,wBAAQgC,QAASnB,EAAekB,UAAU,mCAA1C,+BAuBQ,wBAAQC,QAASjB,EAAsBgB,UAAU,mCAAjD,yBAKJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKE,IAAI,eAAeF,UAAU,eAAeG,IAAKC,IACtD,mBACEJ,UAAU,cACVK,KAAMvC,EACNwC,OAAO,SACPC,IAAI,aAJN,6BAKe1C,cCzHzB2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a8775666.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json';\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0xBF1968c8e34fa9a48D16b8fb133e7435d7F091e6\";\n  \n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n  \n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n  \n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n  \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n  */\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}